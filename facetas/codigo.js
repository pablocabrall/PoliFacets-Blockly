// Do not edit this file; automatically generated by build.py.
'use strict';

// Copyright 2012 Google Inc.  Apache License 2.0
Blockly.Codigo = new Blockly.Generator("Codigo");
Blockly.Codigo.addReservedWords("Blockly,break,case,catch,continue,debugger,default,delete,do,else,finally,for,function,if,in,instanceof,new,return,switch,this,throw,try,typeof,var,void,while,with,class,enum,export,extends,import,super,implements,interface,let,package,private,protected,public,static,yield,const,null,true,false,Array,ArrayBuffer,Boolean,Date,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Error,eval,EvalError,Float32Array,Float64Array,Function,Infinity,Int16Array,Int32Array,Int8Array,isFinite,isNaN,Iterator,JSON,Math,NaN,Number,Object,parseFloat,parseInt,RangeError,ReferenceError,RegExp,StopIteration,String,SyntaxError,TypeError,Uint16Array,Uint32Array,Uint8Array,Uint8ClampedArray,undefined,uneval,URIError,applicationCache,closed,Components,content,_content,controllers,crypto,defaultStatus,dialogArguments,directories,document,frameElement,frames,fullScreen,globalStorage,history,innerHeight,innerWidth,length,location,locationbar,localStorage,menubar,messageManager,mozAnimationStartTime,mozInnerScreenX,mozInnerScreenY,mozPaintCount,name,navigator,opener,outerHeight,outerWidth,pageXOffset,pageYOffset,parent,performance,personalbar,pkcs11,returnValue,screen,screenX,screenY,scrollbars,scrollMaxX,scrollMaxY,scrollX,scrollY,self,sessionStorage,sidebar,status,statusbar,toolbar,top,URL,window,addEventListener,alert,atob,back,blur,btoa,captureEvents,clearImmediate,clearInterval,clearTimeout,close,confirm,disableExternalCapture,dispatchEvent,dump,enableExternalCapture,escape,find,focus,forward,GeckoActiveXObject,getAttention,getAttentionWithCycleCount,getComputedStyle,getSelection,home,matchMedia,maximize,minimize,moveBy,moveTo,mozRequestAnimationFrame,open,openDialog,postMessage,print,prompt,QueryInterface,releaseEvents,removeEventListener,resizeBy,resizeTo,restore,routeEvent,scroll,scrollBy,scrollByLines,scrollByPages,scrollTo,setCursor,setImmediate,setInterval,setResizable,setTimeout,showModalDialog,sizeToContent,stop,unescape,updateCommands,XPCNativeWrapper,XPCSafeJSObjectWrapper,onabort,onbeforeunload,onblur,onchange,onclick,onclose,oncontextmenu,ondevicemotion,ondeviceorientation,ondragdrop,onerror,onfocus,onhashchange,onkeydown,onkeypress,onkeyup,onload,onmousedown,onmousemove,onmouseout,onmouseover,onmouseup,onmozbeforepaint,onpaint,onpopstate,onreset,onresize,onscroll,onselect,onsubmit,onunload,onpageshow,onpagehide,Image,Option,Worker,Event,Range,File,FileReader,Blob,BlobBuilder,Attr,CDATASection,CharacterData,Comment,console,DocumentFragment,DocumentType,DomConfiguration,DOMError,DOMErrorHandler,DOMException,DOMImplementation,DOMImplementationList,DOMImplementationRegistry,DOMImplementationSource,DOMLocator,DOMObject,DOMString,DOMStringList,DOMTimeStamp,DOMUserData,Entity,EntityReference,MediaQueryList,MediaQueryListListener,NameList,NamedNodeMap,Node,NodeFilter,NodeIterator,NodeList,Notation,Plugin,PluginArray,ProcessingInstruction,SharedWorker,Text,TimeRanges,Treewalker,TypeInfo,UserDataHandler,Worker,WorkerGlobalScope,HTMLDocument,HTMLElement,HTMLAnchorElement,HTMLAppletElement,HTMLAudioElement,HTMLAreaElement,HTMLBaseElement,HTMLBaseFontElement,HTMLBodyElement,HTMLBRElement,HTMLButtonElement,HTMLCanvasElement,HTMLDirectoryElement,HTMLDivElement,HTMLDListElement,HTMLEmbedElement,HTMLFieldSetElement,HTMLFontElement,HTMLFormElement,HTMLFrameElement,HTMLFrameSetElement,HTMLHeadElement,HTMLHeadingElement,HTMLHtmlElement,HTMLHRElement,HTMLIFrameElement,HTMLImageElement,HTMLInputElement,HTMLKeygenElement,HTMLLabelElement,HTMLLIElement,HTMLLinkElement,HTMLMapElement,HTMLMenuElement,HTMLMetaElement,HTMLModElement,HTMLObjectElement,HTMLOListElement,HTMLOptGroupElement,HTMLOptionElement,HTMLOutputElement,HTMLParagraphElement,HTMLParamElement,HTMLPreElement,HTMLQuoteElement,HTMLScriptElement,HTMLSelectElement,HTMLSourceElement,HTMLSpanElement,HTMLStyleElement,HTMLTableElement,HTMLTableCaptionElement,HTMLTableCellElement,HTMLTableDataCellElement,HTMLTableHeaderCellElement,HTMLTableColElement,HTMLTableRowElement,HTMLTableSectionElement,HTMLTextAreaElement,HTMLTimeElement,HTMLTitleElement,HTMLTrackElement,HTMLUListElement,HTMLUnknownElement,HTMLVideoElement,HTMLCanvasElement,CanvasRenderingContext2D,CanvasGradient,CanvasPattern,TextMetrics,ImageData,CanvasPixelArray,HTMLAudioElement,HTMLVideoElement,NotifyAudioAvailableEvent,HTMLCollection,HTMLAllCollection,HTMLFormControlsCollection,HTMLOptionsCollection,HTMLPropertiesCollection,DOMTokenList,DOMSettableTokenList,DOMStringMap,RadioNodeList,SVGDocument,SVGElement,SVGAElement,SVGAltGlyphElement,SVGAltGlyphDefElement,SVGAltGlyphItemElement,SVGAnimationElement,SVGAnimateElement,SVGAnimateColorElement,SVGAnimateMotionElement,SVGAnimateTransformElement,SVGSetElement,SVGCircleElement,SVGClipPathElement,SVGColorProfileElement,SVGCursorElement,SVGDefsElement,SVGDescElement,SVGEllipseElement,SVGFilterElement,SVGFilterPrimitiveStandardAttributes,SVGFEBlendElement,SVGFEColorMatrixElement,SVGFEComponentTransferElement,SVGFECompositeElement,SVGFEConvolveMatrixElement,SVGFEDiffuseLightingElement,SVGFEDisplacementMapElement,SVGFEDistantLightElement,SVGFEFloodElement,SVGFEGaussianBlurElement,SVGFEImageElement,SVGFEMergeElement,SVGFEMergeNodeElement,SVGFEMorphologyElement,SVGFEOffsetElement,SVGFEPointLightElement,SVGFESpecularLightingElement,SVGFESpotLightElement,SVGFETileElement,SVGFETurbulenceElement,SVGComponentTransferFunctionElement,SVGFEFuncRElement,SVGFEFuncGElement,SVGFEFuncBElement,SVGFEFuncAElement,SVGFontElement,SVGFontFaceElement,SVGFontFaceFormatElement,SVGFontFaceNameElement,SVGFontFaceSrcElement,SVGFontFaceUriElement,SVGForeignObjectElement,SVGGElement,SVGGlyphElement,SVGGlyphRefElement,SVGGradientElement,SVGLinearGradientElement,SVGRadialGradientElement,SVGHKernElement,SVGImageElement,SVGLineElement,SVGMarkerElement,SVGMaskElement,SVGMetadataElement,SVGMissingGlyphElement,SVGMPathElement,SVGPathElement,SVGPatternElement,SVGPolylineElement,SVGPolygonElement,SVGRectElement,SVGScriptElement,SVGStopElement,SVGStyleElement,SVGSVGElement,SVGSwitchElement,SVGSymbolElement,SVGTextElement,SVGTextPathElement,SVGTitleElement,SVGTRefElement,SVGTSpanElement,SVGUseElement,SVGViewElement,SVGVKernElement,SVGAngle,SVGColor,SVGICCColor,SVGElementInstance,SVGElementInstanceList,SVGLength,SVGLengthList,SVGMatrix,SVGNumber,SVGNumberList,SVGPaint,SVGPoint,SVGPointList,SVGPreserveAspectRatio,SVGRect,SVGStringList,SVGTransform,SVGTransformList,SVGAnimatedAngle,SVGAnimatedBoolean,SVGAnimatedEnumeration,SVGAnimatedInteger,SVGAnimatedLength,SVGAnimatedLengthList,SVGAnimatedNumber,SVGAnimatedNumberList,SVGAnimatedPreserveAspectRatio,SVGAnimatedRect,SVGAnimatedString,SVGAnimatedTransformList,SVGPathSegList,SVGPathSeg,SVGPathSegArcAbs,SVGPathSegArcRel,SVGPathSegClosePath,SVGPathSegCurvetoCubicAbs,SVGPathSegCurvetoCubicRel,SVGPathSegCurvetoCubicSmoothAbs,SVGPathSegCurvetoCubicSmoothRel,SVGPathSegCurvetoQuadraticAbs,SVGPathSegCurvetoQuadraticRel,SVGPathSegCurvetoQuadraticSmoothAbs,SVGPathSegCurvetoQuadraticSmoothRel,SVGPathSegLinetoAbs,SVGPathSegLinetoHorizontalAbs,SVGPathSegLinetoHorizontalRel,SVGPathSegLinetoRel,SVGPathSegLinetoVerticalAbs,SVGPathSegLinetoVerticalRel,SVGPathSegMovetoAbs,SVGPathSegMovetoRel,ElementTimeControl,TimeEvent,SVGAnimatedPathData,SVGAnimatedPoints,SVGColorProfileRule,SVGCSSRule,SVGExternalResourcesRequired,SVGFitToViewBox,SVGLangSpace,SVGLocatable,SVGRenderingIntent,SVGStylable,SVGTests,SVGTextContentElement,SVGTextPositioningElement,SVGTransformable,SVGUnitTypes,SVGURIReference,SVGViewSpec,SVGZoomAndPan");
Blockly.Codigo.ORDER_ATOMIC = 0;
Blockly.Codigo.ORDER_NEW = 1.1;
Blockly.Codigo.ORDER_MEMBER = 1.2;
Blockly.Codigo.ORDER_FUNCTION_CALL = 2;
Blockly.Codigo.ORDER_INCREMENT = 3;
Blockly.Codigo.ORDER_DECREMENT = 3;
Blockly.Codigo.ORDER_BITWISE_NOT = 4.1;
Blockly.Codigo.ORDER_UNARY_PLUS = 4.2;
Blockly.Codigo.ORDER_UNARY_NEGATION = 4.3;
Blockly.Codigo.ORDER_LOGICAL_NOT = 4.4;
Blockly.Codigo.ORDER_TYPEOF = 4.5;
Blockly.Codigo.ORDER_VOID = 4.6;
Blockly.Codigo.ORDER_DELETE = 4.7;
Blockly.Codigo.ORDER_DIVISION = 5.1;
Blockly.Codigo.ORDER_MULTIPLICATION = 5.2;
Blockly.Codigo.ORDER_MODULUS = 5.3;
Blockly.Codigo.ORDER_SUBTRACTION = 6.1;
Blockly.Codigo.ORDER_ADDITION = 6.2;
Blockly.Codigo.ORDER_BITWISE_SHIFT = 7;
Blockly.Codigo.ORDER_RELATIONAL = 8;
Blockly.Codigo.ORDER_IN = 8;
Blockly.Codigo.ORDER_INSTANCEOF = 8;
Blockly.Codigo.ORDER_EQUALITY = 9;
Blockly.Codigo.ORDER_BITWISE_AND = 10;
Blockly.Codigo.ORDER_BITWISE_XOR = 11;
Blockly.Codigo.ORDER_BITWISE_OR = 12;
Blockly.Codigo.ORDER_LOGICAL_AND = 13;
Blockly.Codigo.ORDER_LOGICAL_OR = 14;
Blockly.Codigo.ORDER_CONDITIONAL = 15;
Blockly.Codigo.ORDER_ASSIGNMENT = 16;
Blockly.Codigo.ORDER_COMMA = 17;
Blockly.Codigo.ORDER_NONE = 99;
Blockly.Codigo.ORDER_OVERRIDES = [
    [Blockly.Codigo.ORDER_FUNCTION_CALL, Blockly.Codigo.ORDER_MEMBER],
    [Blockly.Codigo.ORDER_FUNCTION_CALL, Blockly.Codigo.ORDER_FUNCTION_CALL],
    [Blockly.Codigo.ORDER_MEMBER, Blockly.Codigo.ORDER_MEMBER],
    [Blockly.Codigo.ORDER_MEMBER, Blockly.Codigo.ORDER_FUNCTION_CALL],
    [Blockly.Codigo.ORDER_LOGICAL_NOT, Blockly.Codigo.ORDER_LOGICAL_NOT],
    [Blockly.Codigo.ORDER_MULTIPLICATION, Blockly.Codigo.ORDER_MULTIPLICATION],
    [Blockly.Codigo.ORDER_ADDITION,
        Blockly.Codigo.ORDER_ADDITION
    ],
    [Blockly.Codigo.ORDER_LOGICAL_AND, Blockly.Codigo.ORDER_LOGICAL_AND],
    [Blockly.Codigo.ORDER_LOGICAL_OR, Blockly.Codigo.ORDER_LOGICAL_OR]
];
Blockly.Codigo.ONE_BASED_INDEXING = !0;
Blockly.Codigo.init = function(a) {
    Blockly.Codigo.definitions_ = Object.create(null);
    Blockly.Codigo.functionNames_ = Object.create(null);
    Blockly.Codigo.variableDB_ ? Blockly.Codigo.variableDB_.reset() : Blockly.Codigo.variableDB_ = new Blockly.Names(Blockly.Codigo.RESERVED_WORDS_);
    var b = [];
    a = Blockly.Variables.allVariables(a);
    if (a.length) {
        for (var c = 0; c < a.length; c++) b[c] = Blockly.Codigo.variableDB_.getName(a[c], Blockly.Variables.NAME_TYPE);
        Blockly.Codigo.definitions_.variables = "<em><mark>var " + b.join(",")+ "</em></mark>;"
    }
};
Blockly.Codigo.finish = function(a) {
    var b = [],
        c;
    for (c in Blockly.Codigo.definitions_) b.push(Blockly.Codigo.definitions_[c]);
    delete Blockly.Codigo.definitions_;
    delete Blockly.Codigo.functionNames_;
    Blockly.Codigo.variableDB_.reset();
    return b.join("\n\n") + "\n\n\n"+a;
};
Blockly.Codigo.scrubNakedValue = function(a) {
    return a + ";\n"
};
Blockly.Codigo.quote_ = function(a) {
    a = a.replace(/\\/g, "\\\\").replace(/\n/g, "\\\n").replace(/'/g, "\\'");
    return "'" + a + "'"
};
Blockly.Codigo.scrub_ = function(a, b) {
    var c = "";
    if (!a.outputConnection || !a.outputConnection.targetConnection) {
        var d = a.getCommentText();
        (d = Blockly.utils.wrap(d, Blockly.Codigo.COMMENT_WRAP - 3)) && (c = a.getProcedureDef ? c + ("/**\n" + Blockly.Codigo.prefixLines(d + "\n", " * ") + " */\n") : c + Blockly.Codigo.prefixLines(d + "\n", "// "));
        for (var e = 0; e < a.inputList.length; e++) a.inputList[e].type == Blockly.INPUT_VALUE && (d = a.inputList[e].connection.targetBlock()) && (d = Blockly.Codigo.allNestedComments(d)) && (c +=
            Blockly.Codigo.prefixLines(d, "// "))
    }
    e = a.nextConnection && a.nextConnection.targetBlock();
    e = Blockly.Codigo.blockToCode(e);
    return c + b + e
};
Blockly.Codigo.getAdjusted = function(a, b, c, d, e) {
    c = c || 0;
    e = e || Blockly.Codigo.ORDER_NONE;
    Blockly.Codigo.ONE_BASED_INDEXING && c--;
    var f = Blockly.Codigo.ONE_BASED_INDEXING ? "1" : "0";
    a = 0 < c ? Blockly.Codigo.valueToCode(a, b, Blockly.Codigo.ORDER_ADDITION) || f : 0 > c ? Blockly.Codigo.valueToCode(a, b, Blockly.Codigo.ORDER_SUBTRACTION) || f : d ? Blockly.Codigo.valueToCode(a, b, Blockly.Codigo.ORDER_UNARY_NEGATION) || f : Blockly.Codigo.valueToCode(a, b, e) || f;
    if (Blockly.isNumber(a)) a = parseFloat(a) +
        c, d && (a = -a);
    else {
        if (0 < c) {
            a = a + " + " + c;
            var g = Blockly.Codigo.ORDER_ADDITION
        } else 0 > c && (a = a + " - " + -c, g = Blockly.Codigo.ORDER_SUBTRACTION);
        d && (a = c ? "-(" + a + ")" : "-" + a, g = Blockly.Codigo.ORDER_UNARY_NEGATION);
        g = Math.floor(g);
        e = Math.floor(e);
        g && e >= g && (a = "(" + a + ")")
    }
    return a
};

Blockly.Codigo.lists = {};
Blockly.Codigo.lists_create_empty = function(a) {
    return ["<span class='texto-info'>[]</span>", Blockly.Codigo.ORDER_ATOMIC]
};
Blockly.Codigo.lists_create_with = function(a) {
    for (var b = Array(a.itemCount_), c = 0; c < a.itemCount_; c++) b[c] = Blockly.Codigo.valueToCode(a, "ADD" + c, Blockly.Codigo.ORDER_COMMA) || "null";
    return ["<span class='texto-info'>[</span>" + b.join(", ") + "<span class='texto-info'>]</span>", Blockly.Codigo.ORDER_ATOMIC]
};
Blockly.Codigo.lists_repeat = function(a) {
    var b = "<span class='texto-info'>"+Blockly.Codigo.provideFunction_("listsRepeat", ["</span><mark><em>function " + Blockly.Codigo.FUNCTION_NAME_PLACEHOLDER_ + "(value, n) {", "  var array = [];", "  for (var i = 0; i < n; i++) {", "    array[i] = value;", "  }", "  return array;", "}</em></mark>"]),
        c = Blockly.Codigo.valueToCode(a, "ITEM", Blockly.Codigo.ORDER_COMMA) || "null";
    a = Blockly.Codigo.valueToCode(a, "NUM", Blockly.Codigo.ORDER_COMMA) || "0";
    return [b + "(" + c + ", " + a + ")", Blockly.Codigo.ORDER_FUNCTION_CALL]
};
Blockly.Codigo.lists_length = function(a) {
    return [(Blockly.Codigo.valueToCode(a, "VALUE", Blockly.Codigo.ORDER_MEMBER) || "<span class='texto-info'>[]</span>") + "<span class='texto-info'>.length</span>", Blockly.Codigo.ORDER_MEMBER]
};
Blockly.Codigo.lists_isEmpty = function(a) {
    return ["<span class='texto-primary'>!</span>" + (Blockly.Codigo.valueToCode(a, "VALUE", Blockly.Codigo.ORDER_MEMBER) || "<span class='texto-info'>[]</span>") + "<span class='texto-info'>.length</span>", Blockly.Codigo.ORDER_LOGICAL_NOT]
};
Blockly.Codigo.lists_indexOf = function(a) {
    var b = "FIRST" == a.getFieldValue("END") ? "<span class='texto-info'>indexOf</span>" : "<span class='texto-info'>lastIndexOf</span>",
        c = Blockly.Codigo.valueToCode(a, "FIND", Blockly.Codigo.ORDER_NONE) || "<span class='texto-info'>''</span>";
    a = (Blockly.Codigo.valueToCode(a, "VALUE", Blockly.Codigo.ORDER_MEMBER) || "<span class='texto-info'>[]</span>") + "<span class='texto-info'>." + b + "(</span>" + c + "<span class='texto-info'>)</span>";
    return Blockly.Codigo.ONE_BASED_INDEXING ? [a + "<span class='texto-info'> + 1</span>", Blockly.Codigo.ORDER_ADDITION] : [a, Blockly.Codigo.ORDER_FUNCTION_CALL]
};
Blockly.Codigo.lists_getIndex = function(a) {
    var b = a.getFieldValue("MODE") || "GET",
        c = a.getFieldValue("WHERE") || "FROM_START",
        d = Blockly.Codigo.valueToCode(a, "VALUE", "RANDOM" == c ? Blockly.Codigo.ORDER_COMMA : Blockly.Codigo.ORDER_MEMBER) || "<span class='texto-info'>[]</span>";
    switch (c) {
        case "FIRST":
            if ("GET" == b) return [d + "<span class='texto-info'>[0]</span>", Blockly.Codigo.ORDER_MEMBER];
            if ("GET_REMOVE" == b) return [d + "<span class='texto-info'>.shift()</span>", Blockly.Codigo.ORDER_MEMBER];
            if ("REMOVE" == b) return d + "<span class='texto-info'>.shift();</span>\n";
            break;
        case "LAST":
            if ("GET" == b) return [d + "<span class='texto-info'>.slice(-1)[0]</span>", Blockly.Codigo.ORDER_MEMBER];
            if ("GET_REMOVE" == b) return [d + "<span class='texto-info'>.pop()</span>", Blockly.Codigo.ORDER_MEMBER];
            if ("REMOVE" == b) return d + "<span class='texto-info'>.pop();</span>\n";
            break;
        case "FROM_START":
            a = Blockly.Codigo.getAdjusted(a, "AT");
            if ("GET" == b) return [d + "<span class='texto-info'>[" + a + "]</span>", Blockly.Codigo.ORDER_MEMBER];
            if ("GET_REMOVE" == b) return [d + "<span class='texto-info'>.splice(" + a + ", 1)[0]</span>", Blockly.Codigo.ORDER_FUNCTION_CALL];
            if ("REMOVE" == b) return d + "<span class='texto-info'>.splice(" + a + ", 1);</span>\n";
            break;
        case "FROM_END":
            a = Blockly.Codigo.getAdjusted(a, "AT", 1, !0);
            if ("GET" == b) return [d + "<span class='texto-info'>.slice(" + a + ")[0]</span>", Blockly.Codigo.ORDER_FUNCTION_CALL];
            if ("GET_REMOVE" == b) return [d + "<span class='texto-info'>.splice(" + a + ", 1)[0]</span>", Blockly.Codigo.ORDER_FUNCTION_CALL];
            if ("REMOVE" == b) return d + "<span class='texto-info'>.splice(" + a + ", 1);</span>";
            break;
        case "RANDOM":
            d = "<span class='texto-info'>"+Blockly.Codigo.provideFunction_("listsGetRandomItem", ["</span><mark><em>function " + Blockly.Codigo.FUNCTION_NAME_PLACEHOLDER_ + "(list, remove) {", "  var x = Math.floor(Math.random() * list.length);", "  if (remove) {", "    return list.splice(x, 1)[0];", "  } else {", "    return list[x];", "  }", "}</em></mark>"]) + "(" + d + ", " + ("GET" != b) + ")";
            if ("GET" == b || "GET_REMOVE" == b) return [d,
                Blockly.Codigo.ORDER_FUNCTION_CALL
            ];
            if ("REMOVE" == b) return d + ";\n"
    }
    throw "Unhandled combination (lists_getIndex).";
};
Blockly.Codigo.lists_setIndex = function(a) {
    function b() {
        if (c.match(/^\w+$/)) return "";
        var a = Blockly.Codigo.variableDB_.getDistinctName("tmpList", Blockly.Variables.NAME_TYPE),
            b = "<mark><em>var " + a + " =</em></mark> " + c + ";\n";
        c = a;
        return b
    }
    var c = Blockly.Codigo.valueToCode(a, "LIST", Blockly.Codigo.ORDER_MEMBER) || "<span class='texto-info'>[]</span>",
        d = a.getFieldValue("MODE") || "GET",
        e = a.getFieldValue("WHERE") || "FROM_START",
        f = Blockly.Codigo.valueToCode(a, "TO", Blockly.Codigo.ORDER_ASSIGNMENT) || "<span class='texto-info'>null</span>";
    switch (e) {
        case "FIRST":
            if ("SET" == d) return c +
                "<span class='texto-info'>[0] = " + f + ";</span>\n";
            if ("INSERT" == d) return c + "<span class='texto-info'>.unshift(" + f + ");</span>\n";
            break;
        case "LAST":
            if ("SET" == d) return a = b(), a + ("<span class='texto-info'>"+c + "[" + c + ".length - 1] = " + f + ";</span>\n");
            if ("INSERT" == d) return c + "<span class='texto-info'>.push(" + f + ");</span>\n";
            break;
        case "FROM_START":
            e = Blockly.Codigo.getAdjusted(a, "AT");
            if ("SET" == d) return c + "<span class='texto-info'>[" + e + "] = " + f + ";</span>\n";
            if ("INSERT" == d) return c + "<span class='texto-info'>.splice(" + e + ", 0, " + f + ");</span>\n";
            break;
        case "FROM_END":
            e = Blockly.Codigo.getAdjusted(a, "AT", 1, !1, Blockly.Codigo.ORDER_SUBTRACTION);
            a = b();
            if ("SET" == d) return "<span class='texto-info'>"+a + (c + "[" + c + ".length - " + e +
                "] = " + f + ";</span>\n");
            if ("INSERT" == d) return a + ("<span class='texto-info'>"+c + ".splice(" + c + ".length - " + e + ", 0, " + f + ");</span>\n");
            break;
        case "RANDOM":
            a = b();
            e = Blockly.Codigo.variableDB_.getDistinctName("tmpX", Blockly.Variables.NAME_TYPE);
            a += "<mark><em>var " + e + " = Math.floor(Math.random() * " + c + ".length);</em></mark>\n";
            if ("SET" == d) return a + ("<span class='texto-info'>"+c + "[" + e + "] = " + f + ";</span>\n");
            if ("INSERT" == d) return "<span class='texto-info'>"+a + (c + ".splice(" + e + ", 0, " + f + ");</span>\n")
    }
    throw "Unhandled combination (lists_setIndex).";
};
Blockly.Codigo.lists.getIndex_ = function(a, b, c) {
    return "FIRST" == b ? "0" : "FROM_END" == b ? a + ".length - 1 - " + c : "LAST" == b ? a + ".length - 1" : c
};
Blockly.Codigo.lists_getSublist = function(a) {
    var b = Blockly.Codigo.valueToCode(a, "LIST", Blockly.Codigo.ORDER_MEMBER) || "[]",
        c = a.getFieldValue("WHERE1"),
        d = a.getFieldValue("WHERE2");
    if ("FIRST" == c && "LAST" == d) b += "<span class='texto-info'>.slice(0)</span>";
    else if (b.match(/^\w+$/) || "FROM_END" != c && "FROM_START" == d) {
        switch (c) {
            case "FROM_START":
                var e = "<span class='texto-info'>"+Blockly.Codigo.getAdjusted(a, "AT1")+"</span>";
                break;
            case "FROM_END":
                e = Blockly.Codigo.getAdjusted(a, "AT1", 1, !1, Blockly.Codigo.ORDER_SUBTRACTION);
                e = b + "<span class='texto-info'>.length - " + e+"</span>";
                break;
            case "FIRST":
                e =
                    "<span class='texto-info'>0</span>";
                break;
            default:
                throw "Unhandled option (lists_getSublist).";
        }
        switch (d) {
            case "FROM_START":
                a = "<span class='texto-info'>"+Blockly.Codigo.getAdjusted(a, "AT2", 1)+"</span>";
                break;
            case "FROM_END":
                a = Blockly.Codigo.getAdjusted(a, "AT2", 0, !1, Blockly.Codigo.ORDER_SUBTRACTION);
                a = b + "<span class='texto-info'>.length - " + a+"</span>";
                break;
            case "LAST":
                a = b + "<span class='texto-info'>.length</span>";
                break;
            default:
                throw "Unhandled option (lists_getSublist).";
        }
        b = b + "<span class='texto-info'>.slice(" + e + ", " + a + ")</span>"
    } else {
        e = Blockly.Codigo.getAdjusted(a, "AT1");
        a = Blockly.Codigo.getAdjusted(a, "AT2");
        var f = Blockly.Codigo.lists.getIndex_,
            g = {
                FIRST: "First",
                LAST: "Last",
                FROM_START: "FromStart",
                FROM_END: "FromEnd"
            },
            b = "<span class='texto-info'>"+Blockly.Codigo.provideFunction_("subsequence" + g[c] + g[d], ["</span><mark><em>function " + Blockly.Codigo.FUNCTION_NAME_PLACEHOLDER_ + "(sequence" + ("FROM_END" == c || "FROM_START" == c ? ", at1" : "") + ("FROM_END" == d || "FROM_START" == d ? ", at2" : "") + ") {", "  var start = " + f("sequence", c, "at1") + ";", "  var end = " + f("sequence", d, "at2") + " + 1;", "  return sequence.slice(start, end);", "}</em></mark>"]) + "(" + b + ("FROM_END" == c || "FROM_START" == c ? ", " + e : "") + ("FROM_END" == d || "FROM_START" ==
                d ? ", " + a : "") + ")"
    }
    return [b, Blockly.Codigo.ORDER_FUNCTION_CALL]
};
Blockly.Codigo.lists_sort = function(a) {
    var b = Blockly.Codigo.valueToCode(a, "LIST", Blockly.Codigo.ORDER_FUNCTION_CALL) || "<span class='texto-info'>[]</span>",
        c = "1" === a.getFieldValue("DIRECTION") ? 1 : -1;
    a = a.getFieldValue("TYPE");
    var d = "<span class='texto-info'>"+Blockly.Codigo.provideFunction_("listsGetSortCompare", ["</span><mark><em>function " + Blockly.Codigo.FUNCTION_NAME_PLACEHOLDER_ + "(type, direction) {", "  var compareFuncs = {", '    "NUMERIC": function(a, b) {', "        return parseFloat(a) - parseFloat(b); },", '    "TEXT": function(a, b) {', "        return a.toString() > b.toString() ? 1 : -1; },",
        '    "IGNORE_CASE": function(a, b) {', "        return a.toString().toLowerCase() > b.toString().toLowerCase() ? 1 : -1; },", "  };", "  var compare = compareFuncs[type];", "  return function(a, b) { return compare(a, b) * direction; }", "}</em></mark>"
    ]);
    return [b + "<span class='texto-info'>.slice().sort(</span>" + d + '("' + a + '", ' + c + "))", Blockly.Codigo.ORDER_FUNCTION_CALL]
};
Blockly.Codigo.lists_split = function(a) {
    var b = Blockly.Codigo.valueToCode(a, "INPUT", Blockly.Codigo.ORDER_MEMBER),
        c = Blockly.Codigo.valueToCode(a, "DELIM", Blockly.Codigo.ORDER_NONE) || "<span class='texto-info'>''</span>";
    a = a.getFieldValue("MODE");
    if ("SPLIT" == a) b || (b = "<span class='texto-info'>''</span>"), a = "<span class='texto-info'>split</span>";
    else if ("JOIN" == a) b || (b = "<span class='texto-info'>[]</span>"), a = "<span class='texto-info'>join</span>";
    else throw "Unknown mode: " + a;
    return [b + "<span class='texto-info'>." + a + "(" + c + ")</span>", Blockly.Codigo.ORDER_FUNCTION_CALL]
};
//Blocos de lógica
var teste2=0;
Blockly.Codigo.logic = {};
Blockly.Codigo.controls_if = function(a) {
	teste2++;
    for (var b = 0, c = Blockly.Codigo.valueToCode(a, "IF" + b, Blockly.Codigo.ORDER_NONE) || "<em><mark>false</mark></em>", d = Blockly.Codigo.statementToCode(a, "DO" + b), e = "<span id='"+teste2+"'></span><span class='texto-primary'>if (</span>" + c + "<span class='texto-primary'>) {</span>\n" + d + "<span class='texto-primary'>}</span>", b = 1; b <= a.elseifCount_; b++) c = Blockly.Codigo.valueToCode(a, "IF" + b, Blockly.Codigo.ORDER_NONE) || "<em><mark>false</mark></em>", d = Blockly.Codigo.statementToCode(a, "DO" + b), e += " <span class='texto-primary'>else if (</span>" + c + "<span class='texto-primary'>) {</span>\n" + d + "<span class='texto-primary'>}</span>";
    a.elseCount_ && (d = Blockly.Codigo.statementToCode(a, "ELSE"), e += " <span class='texto-primary'>else {</span>\n" + d + "<span class='texto-primary'>}</span>");
    return e + "\n"
};
Blockly.Codigo.logic_compare = function(a) {
    var b = {
            EQ: "<span class='texto-primary'>==</span>",
            NEQ: "<span class='texto-primary'>!=</span>",
            LT: "<span class='texto-primary'><</span>",
            LTE: "<span class='texto-primary'><=</span>",
            GT: "<span class='texto-primary'>></span>",
            GTE: "<span class='texto-primary'>>=</span>"
        }[a.getFieldValue("OP")],
        c = "==" == b || "!=" == b ? Blockly.Codigo.ORDER_EQUALITY : Blockly.Codigo.ORDER_RELATIONAL,
        d = Blockly.Codigo.valueToCode(a, "A", c) || "0";
    a = Blockly.Codigo.valueToCode(a, "B", c) || "0";
    return [d + " " + b + " " + a, c]
};
Blockly.Codigo.logic_operation = function(a) {
    var b = "AND" == a.getFieldValue("OP") ? "<span class='texto-primary'>&&</span>" : "<span class='texto-primary'>||</span>",
        c = "&&" == b ? Blockly.Codigo.ORDER_LOGICAL_AND : Blockly.Codigo.ORDER_LOGICAL_OR,
        d = Blockly.Codigo.valueToCode(a, "A", c);
    a = Blockly.Codigo.valueToCode(a, "B", c);
    if (d || a) {
        var e = "&&" == b ? "true" : "false";
        d || (d = e);
        a || (a = e)
    } else a = d = "false";
    return [d + " " + b + " " + a, c]
};
Blockly.Codigo.logic_negate = function(a) {
    var b = Blockly.Codigo.ORDER_LOGICAL_NOT;
    return ["<span class='texto-primary'>!</span>" + (Blockly.Codigo.valueToCode(a, "BOOL", b) || "<span class='texto-primary'>true</span>"), b]
};
Blockly.Codigo.logic_boolean = function(a) {
    return ["TRUE" == a.getFieldValue("BOOL") ? "<span class='texto-primary'>true</span>" : "<span class='texto-primary'>false</span>", Blockly.Codigo.ORDER_ATOMIC]
};
Blockly.Codigo.logic_null = function(a) {
    return ["<span class='texto-primary'>null</span>", Blockly.Codigo.ORDER_ATOMIC]
};
Blockly.Codigo.logic_ternary = function(a) {
    var b = Blockly.Codigo.valueToCode(a, "IF", Blockly.Codigo.ORDER_CONDITIONAL) || "<span class='texto-primary'>false</span>",
        c = Blockly.Codigo.valueToCode(a, "THEN", Blockly.Codigo.ORDER_CONDITIONAL) || "<span class='texto-primary'>null</span>";
    a = Blockly.Codigo.valueToCode(a, "ELSE", Blockly.Codigo.ORDER_CONDITIONAL) || "<span class='texto-primary'>null</span>";
    return [b + " <span class='texto-primary'>?</span> " + c + " : " + a, Blockly.Codigo.ORDER_CONDITIONAL]
};
//blocos de laço
Blockly.Codigo.loops = {};
Blockly.Codigo.controls_repeat_ext = function(a) {
    var b = a.getField("TIMES") ? String(Number(a.getFieldValue("TIMES"))) : Blockly.Codigo.valueToCode(a, "TIMES", Blockly.Codigo.ORDER_ASSIGNMENT) || "0",
        c = Blockly.Codigo.statementToCode(a, "DO"),
        c = Blockly.Codigo.addLoopTrap(c, a.id);
    a = "";
    var d = Blockly.Codigo.variableDB_.getDistinctName("count", Blockly.Variables.NAME_TYPE),
        e = b;
    b.match(/^\w+$/) || Blockly.isNumber(b) || (e = Blockly.Codigo.variableDB_.getDistinctName("repeat_end", Blockly.Variables.NAME_TYPE),
        a += "<mark><em>var " + e + " = </em></mark>" + b + ";\n");
    return a + ("<span class='texto-success'>for (</span><mark><em>var" + d + " = 0;" + d + " < " + e + ";" + d + "++</em></mark><span class='texto-success'>) {</span>\n" + c + "<span class='texto-success'>}</span>\n")
};
Blockly.Codigo.controls_repeat = Blockly.Codigo.controls_repeat_ext;
Blockly.Codigo.controls_whileUntil = function(a) {
    var b = "UNTIL" == a.getFieldValue("MODE"),
        c = Blockly.Codigo.valueToCode(a, "BOOL", b ? Blockly.Codigo.ORDER_LOGICAL_NOT : Blockly.Codigo.ORDER_NONE) || "<mark><em>false</em></mark>",
        d = Blockly.Codigo.statementToCode(a, "DO"),
        d = Blockly.Codigo.addLoopTrap(d, a.id);
    b && (c = "<mark><em>!</em></mark>" + c);
    return "<span class='texto-success'>while (</span>" + c + "<span class='texto-success'>) {</span>\n" + d + "<span class='texto-success'>}</span>\n"
};
Blockly.Codigo.controls_for = function(a) {
    var b = Blockly.Codigo.variableDB_.getName(a.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE),
        c = Blockly.Codigo.valueToCode(a, "FROM", Blockly.Codigo.ORDER_ASSIGNMENT) || "0",
        d = Blockly.Codigo.valueToCode(a, "TO", Blockly.Codigo.ORDER_ASSIGNMENT) || "0",
        e = Blockly.Codigo.valueToCode(a, "BY", Blockly.Codigo.ORDER_ASSIGNMENT) || "1",
        f = Blockly.Codigo.statementToCode(a, "DO"),
        f = Blockly.Codigo.addLoopTrap(f, a.id);
    if (Blockly.isNumber(c) && Blockly.isNumber(d) &&
        Blockly.isNumber(e)) {
        var g = parseFloat(c) <= parseFloat(d);
        a = "<span class='texto-success'>for (" + b + " = " + c + "; " + b + (g ? " <= " : " >= ") + d + "; " + b+"</span>";
        b = Math.abs(parseFloat(e));
        a = (1 == b ? a + (g ? "<span class='texto-success'>++</span>" : "<span class='texto-success'>--</span>") : a + ((g ? " <span class='texto-success'>+=</span> " : "<span class='texto-success'> -= </span>") + b)) + ("<span class='texto-success'>) {</span>\n" + f + "<span class='texto-success'>}</span>\n")
    } else a = "", g = c, c.match(/^\w+$/) || Blockly.isNumber(c) || (g = Blockly.Codigo.variableDB_.getDistinctName(b + "_start", Blockly.Variables.NAME_TYPE), a += "<mark><em>var " + g + " =</em></mark> " + c + ";\n"), c = d, d.match(/^\w+$/) || Blockly.isNumber(d) || (c = Blockly.Codigo.variableDB_.getDistinctName(b + "_end", Blockly.Variables.NAME_TYPE),
        a += "<mark><em>var " + c + " =</em></mark> " + d + ";\n"), d = Blockly.Codigo.variableDB_.getDistinctName(b + "_inc", Blockly.Variables.NAME_TYPE), a += "<mark><em>var " + d + " =</em></mark> ", a = Blockly.isNumber(e) ? a + (Math.abs(e) + ";\n") : a + ("Math.abs(" + e + ");\n"), a = a + ("<mark><em>if (" + g + " > " + c + ") {\n") + (Blockly.Codigo.INDENT + d + " = -" + d + ";\n"), a += "}</em></mark>\n", a += "<span class='texto-success'>for (" + b + " = </span><mark><em>" + g + ";" + d + " >= 0 ? </em></mark>" + b + "<em><mark><=</em></mark>" + c + ":" + b + " <em><mark>>=</em></mark> " + c + ";" + b + "<mark><em> += " + d + "</em></mark>"+"<span class='texto-success'>) {\n</span>" + f + "<span class='texto-success'>}</span>\n";
    return a
};
Blockly.Codigo.controls_forEach = function(a) {
    var b = Blockly.Codigo.variableDB_.getName(a.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE),
        c = Blockly.Codigo.valueToCode(a, "LIST", Blockly.Codigo.ORDER_ASSIGNMENT) || "[]",
        d = Blockly.Codigo.statementToCode(a, "DO"),
        d = Blockly.Codigo.addLoopTrap(d, a.id);
    a = "";
    var e = c;
    c.match(/^\w+$/) || (e = Blockly.Codigo.variableDB_.getDistinctName(b + "_list", Blockly.Variables.NAME_TYPE), a += "<mark><em>var " + e + "</em></mark> = " + c + ";\n");
    c = Blockly.Codigo.variableDB_.getDistinctName(b +"_index", Blockly.Variables.NAME_TYPE);
    d = Blockly.Codigo.INDENT +"<mark><em>"+ b + " = " + e + "[" + c + "];</em></mark>\n" + d;
     return a + ("<span class='texto-success'>for (</span><mark><em>var " + c + " in " + e + "</em></mark><span class='texto-success'>) {</span>\n" + d + "<span class='texto-success'>}</span>\n")
};
Blockly.Codigo.controls_flow_statements = function(a) {
    switch (a.getFieldValue("FLOW")) {
        case "BREAK":
            return "<span class='texto-success'>break;</span>\n";
        case "CONTINUE":
            return "<span class='texto-success'>continue;<span>\n"
    }
    throw "Unknown flow statement.";
};
Blockly.Codigo.math = {};
Blockly.Codigo.math_number = function(a) {
    return ["<span class='texto-warning'>"+parseFloat(a.getFieldValue("NUM"))+"</span>", Blockly.Codigo.ORDER_ATOMIC]
};
Blockly.Codigo.math_arithmetic = function(a) {
    var b = {
            ADD: ["<span class='texto-warning'>+</span>", Blockly.Codigo.ORDER_ADDITION],
            MINUS: ["<span class='texto-warning'> -</span> ", Blockly.Codigo.ORDER_SUBTRACTION],
            MULTIPLY: ["<span class='texto-warning'> * </span>", Blockly.Codigo.ORDER_MULTIPLICATION],
            DIVIDE: ["<span class='texto-warning'> /</span> ", Blockly.Codigo.ORDER_DIVISION],
            POWER: [null, Blockly.Codigo.ORDER_COMMA]
        }[a.getFieldValue("OP")],
        c = b[0],
        b = b[1],
        d = Blockly.Codigo.valueToCode(a, "A", b) || "0";
    a = Blockly.Codigo.valueToCode(a, "B", b) || "0";
    return c ? [d + c + a, b] : ["<span class='texto-warning'>Math.pow(" + d + ", " + a + ")</span>", Blockly.Codigo.ORDER_FUNCTION_CALL]
};
Blockly.Codigo.math_single = function(a) {
    var b = a.getFieldValue("OP"),
        c;
    if ("NEG" == b) return a = Blockly.Codigo.valueToCode(a, "NUM", Blockly.Codigo.ORDER_UNARY_NEGATION) || "0", "-" == a[0] && (a = " " + a), ["-" + a, Blockly.Codigo.ORDER_UNARY_NEGATION];
    a = "SIN" == b || "COS" == b || "TAN" == b ? Blockly.Codigo.valueToCode(a, "NUM", Blockly.Codigo.ORDER_DIVISION) || "0" : Blockly.Codigo.valueToCode(a, "NUM", Blockly.Codigo.ORDER_NONE) || "0";
    switch (b) {
        case "ABS":
            c = "<span class='texto-warning'>Math.abs(" + a + ")</span>";
            break;
        case "ROOT":
            c = "<span class='texto-warning'>Math.sqrt(" +
                a + ")</span>";
            break;
        case "LN":
            c = "<span class='texto-warning'>Math.log(" + a + ")</span>";
            break;
        case "EXP":
            c = "<span class='texto-warning'>Math.exp(" + a + ")</span>";
            break;
        case "POW10":
            c = "<span class='texto-warning'>Math.pow(10," + a + ")</span>";
            break;
        case "ROUND":
            c = "<span class='texto-warning'>Math.round(" + a + ")</span>";
            break;
        case "ROUNDUP":
            c = "<span class='texto-warning'>Math.ceil(" + a + ")</span>";
            break;
        case "ROUNDDOWN":
            c = "<span class='texto-warning'>Math.floor(" + a + ")</span>";
            break;
        case "SIN":
            c = "<span class='texto-warning'>Math.sin(" + a + " / 180 * Math.PI)</span>";
            break;
        case "COS":
            c = "<span class='texto-warning'>Math.cos(" + a + " / 180 * Math.PI)</span>";
            break;
        case "TAN":
            c = "<span class='texto-warning'>Math.tan(" + a + " / 180 * Math.PI)</span>"
    }
    if (c) return [c, Blockly.Codigo.ORDER_FUNCTION_CALL];
    switch (b) {
        case "LOG10":
            c = "<span class='texto-warning'>Math.log(" + a +
                ") / Math.log(10)</span>";
            break;
        case "ASIN":
            c = "<span class='texto-warning'>Math.asin(" + a + ") / Math.PI * 180</span>";
            break;
        case "ACOS":
            c = "<span class='texto-warning'>Math.acos(" + a + ") / Math.PI * 180</span>";
            break;
        case "ATAN":
            c = "<span class='texto-warning'>Math.atan(" + a + ") / Math.PI * 180</span>";
            break;
        default:
            throw "Unknown math operator: " + b;
    }
    return [c, Blockly.Codigo.ORDER_DIVISION]
};
Blockly.Codigo.math_constant = function(a) {
    return {
        PI: ["<span class='texto-warning'>Math.PI</span>", Blockly.Codigo.ORDER_MEMBER],
        E: ["<span class='texto-warning'>Math.E</span>", Blockly.Codigo.ORDER_MEMBER],
        GOLDEN_RATIO: ["<span class='texto-warning'>(1 + Math.sqrt(5)) / 2</span>", Blockly.Codigo.ORDER_DIVISION],
        SQRT2: ["<span class='texto-warning'>Math.SQRT2</span>", Blockly.Codigo.ORDER_MEMBER],
        SQRT1_2: ["<span class='texto-warning'>Math.SQRT1_2</span>", Blockly.Codigo.ORDER_MEMBER],
        INFINITY: ["<span class='texto-warning'>Infinity</span>", Blockly.Codigo.ORDER_ATOMIC]
    }[a.getFieldValue("CONSTANT")]
};
Blockly.Codigo.math_number_property = function(a) {
    var b = Blockly.Codigo.valueToCode(a, "NUMBER_TO_CHECK", Blockly.Codigo.ORDER_MODULUS) || "0",
        c = a.getFieldValue("PROPERTY"),
        d;
    if ("PRIME" == c) return ["<span class='texto-warning'>"+Blockly.Codigo.provideFunction_("mathIsPrime", ["</span><mark><em>function " + Blockly.Codigo.FUNCTION_NAME_PLACEHOLDER_ + "(n) {", "  if (n == 2 || n == 3) {", "    return true;", "  }","  if (isNaN(n) || n <= 1 || n % 1 != 0 || n % 2 == 0 || n % 3 == 0) {", "    return false;", "  }","  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {", "    if (n % (x - 1) == 0 || n % (x + 1) == 0) {", "      return false;", "    }", "  }", "  return true;", "}</em></mark>"
    ]) + "(" + b + ")", Blockly.Codigo.ORDER_FUNCTION_CALL];
    switch (c) {
        case "EVEN":
            d = b + "<span class='texto-warning'> % 2 == 0</span>";
            break;
        case "ODD":
            d = b + "<span class='texto-warning'> % 2 == 1</span>";
            break;
        case "WHOLE":
            d = b + "<span class='texto-warning'> % 1 == 0</span>";
            break;
        case "POSITIVE":
            d =
                b + "<span class='texto-warning'> > 0</span>";
            break;
        case "NEGATIVE":
            d = b + "<span class='texto-warning'> < 0</span>";
            break;
        case "DIVISIBLE_BY":
            a = Blockly.Codigo.valueToCode(a, "DIVISOR", Blockly.Codigo.ORDER_MODULUS) || "<span class='texto-warning'>0</span>", d = b + "<span class='texto-warning'> % </span>" + a + "<span class='texto-warning'> == 0</span>"
    }
    return [d, Blockly.Codigo.ORDER_EQUALITY]
};
Blockly.Codigo.math_change = function(a) {
    var b = Blockly.Codigo.valueToCode(a, "DELTA", Blockly.Codigo.ORDER_ADDITION) || "0";
    a = Blockly.Codigo.variableDB_.getName(a.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE);
    return a + "<span class='texto-warning'> = (typeof </span>" + a + "<span class='texto-warning'> == 'number' ? </span>" + a + "<span class='texto-warning'> : 0) + </span>" + b + ";\n"
};
Blockly.Codigo.math_round = Blockly.Codigo.math_single;
Blockly.Codigo.math_trig = Blockly.Codigo.math_single;
Blockly.Codigo.math_on_list = function(a) {
    var b = a.getFieldValue("OP");
    switch (b) {
        case "SUM":
            a = Blockly.Codigo.valueToCode(a, "LIST", Blockly.Codigo.ORDER_MEMBER) || "<span class='texto-warning'>[]</span>";
            a += "<span class='texto-warning'>.reduce(function(x, y) {return x + y;})</span>";
            break;
        case "MIN":
            a = Blockly.Codigo.valueToCode(a, "LIST", Blockly.Codigo.ORDER_COMMA) || "<span class='texto-warning'>[]</span>";
            a = "<span class='texto-warning'>Math.min.apply(null, </span>" + a + "<span class='texto-warning'>)</span>";
            break;
        case "MAX":
            a = Blockly.Codigo.valueToCode(a, "LIST", Blockly.Codigo.ORDER_COMMA) || "<span class='texto-warning'>[]</span>";
            a = "<span class='texto-warning'>Math.max.apply(null, </span>" + a + "<span class='texto-warning'>)</span>";
            break;
        case "AVERAGE":
            b = "<span class='texto-warning'>"+Blockly.Codigo.provideFunction_("mathMean", ["</span><mark><em>function" + Blockly.Codigo.FUNCTION_NAME_PLACEHOLDER_ + "(myList) {", "  return myList.reduce(function(x, y) {return x + y;}) / myList.length;", "}</em></mark>"]);
            a = Blockly.Codigo.valueToCode(a, "LIST", Blockly.Codigo.ORDER_NONE) || "<span class='texto-warning'>[]</span>";
            a =b + "(" + a + ")";
            break;
        case "MEDIAN":
            b = Blockly.Codigo.provideFunction_("mathMedian", ["<mark><em>function " + Blockly.Codigo.FUNCTION_NAME_PLACEHOLDER_ + "(myList) {", "  var localList = myList.filter(function (x) {return typeof x == 'number';});", "  if (!localList.length) return null;", "  localList.sort(function(a, b) {return b - a;});", "  if (localList.length % 2 == 0) {", "    return (localList[localList.length / 2 - 1] + localList[localList.length / 2]) / 2;", "  } else {", "    return localList[(localList.length - 1) / 2];", "  }", "}</em></mark>"
            ]);
            a = Blockly.Codigo.valueToCode(a, "LIST", Blockly.Codigo.ORDER_NONE) || "<span class='texto-warning'>[]</span>";
            a = "<span class='texto-warning'>"+b + "(</span>" + a + "<span class='texto-warning'>)</span>";
            break;
        case "MODE":
            b = "<span class='texto-warning'>"+Blockly.Codigo.provideFunction_("mathModes", ["</span><mark><em> function" + Blockly.Codigo.FUNCTION_NAME_PLACEHOLDER_ + "(values) {", "  var modes = [];",
                "  var counts = [];", "  var maxCount = 0;", "  for (var i = 0; i < values.length; i++) {", "    var value = values[i];", "    var found = false;", "    var thisCount;", "    for (var j = 0; j < counts.length; j++) {", "      if (counts[j][0] === value) {", "        thisCount = ++counts[j][1];", "        found = true;", "        break;", "      }", "    }", "    if (!found) {", "      counts.push([value, 1]);", "      thisCount = 1;", "    }", "    maxCount = Math.max(thisCount, maxCount);", "  }", "  for (var j = 0; j < counts.length; j++) {",
                "    if (counts[j][1] == maxCount) {", "        modes.push(counts[j][0]);", "    }", "  }", "  return modes;", "}</em></mark>"
            ]);
            a = Blockly.Codigo.valueToCode(a, "LIST", Blockly.Codigo.ORDER_NONE) || "<span class='texto-warning'>[]</span>";
            a = b + "(" + a + ")";
            break;
        case "STD_DEV":
            b ="<span class='texto-warning'>"+ Blockly.Codigo.provideFunction_("mathStandardDeviation", ["</span><mark><em>function " + Blockly.Codigo.FUNCTION_NAME_PLACEHOLDER_ + "(numbers) {", "  var n = numbers.length;", "  if (!n) return null;", "  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;", "  var variance = 0;",
                "  for (var j = 0; j < n; j++) {", "    variance += Math.pow(numbers[j] - mean, 2);", "  }", "  variance = variance / n;", "  return Math.sqrt(variance);", "}</em></mark>"
            ]);
            a = Blockly.Codigo.valueToCode(a, "LIST", Blockly.Codigo.ORDER_NONE) || "<span class='texto-warning'>[]</span>";
            a = b + "(" + a + ")";
            break;
        case "RANDOM":
            b = "<span class='texto-warning'>"+Blockly.Codigo.provideFunction_("mathRandomList", ["</span><mark><em>function " + Blockly.Codigo.FUNCTION_NAME_PLACEHOLDER_ + "(list) {", "  var x = Math.floor(Math.random() * list.length);", "  return list[x];", "}</em></mark>"]);
            a = Blockly.Codigo.valueToCode(a,
                "LIST", Blockly.Codigo.ORDER_NONE) || "<span class='texto-warning'>[]</span>";
            a = b + "(" + a + ")";
            break;
        default:
            throw "Unknown operator: " + b;
    }
    return [a, Blockly.Codigo.ORDER_FUNCTION_CALL]
};
Blockly.Codigo.math_modulo = function(a) {
    var b = Blockly.Codigo.valueToCode(a, "DIVIDEND", Blockly.Codigo.ORDER_MODULUS) || "0";
    a = Blockly.Codigo.valueToCode(a, "DIVISOR", Blockly.Codigo.ORDER_MODULUS) || "0";
    return [b + "<span class='texto-warning'>%</span> " + a, Blockly.Codigo.ORDER_MODULUS]
};
Blockly.Codigo.math_constrain = function(a) {
    var b = Blockly.Codigo.valueToCode(a, "VALUE", Blockly.Codigo.ORDER_COMMA) || "0",
        c = Blockly.Codigo.valueToCode(a, "LOW", Blockly.Codigo.ORDER_COMMA) || "0";
    a = Blockly.Codigo.valueToCode(a, "HIGH", Blockly.Codigo.ORDER_COMMA) || "Infinity";
    return ["<span class='texto-warning'>Math.min(Math.max(</span>" + b + "<span class='texto-warning'>, </span>" + c + "<span class='texto-warning'>), </span>" + a + "<span class='texto-warning'>)</span>", Blockly.Codigo.ORDER_FUNCTION_CALL]
};
Blockly.Codigo.math_random_int = function(a) {
    var b = Blockly.Codigo.valueToCode(a, "FROM", Blockly.Codigo.ORDER_COMMA) || "0";
    a = Blockly.Codigo.valueToCode(a, "TO", Blockly.Codigo.ORDER_COMMA) || "0";
    return "<span class='texto-warning'>"+[Blockly.Codigo.provideFunction_("mathRandomInt", ["</span><mark><em>function " + Blockly.Codigo.FUNCTION_NAME_PLACEHOLDER_ + "(a, b) {", "  if (a > b) {", "    // Swap a and b to ensure a is smaller.", "    var c = a;", "    a = b;", "    b = c;", "  }", "  return Math.floor(Math.random() * (b - a + 1) + a);",
        "}</em></mark>"
    ]) + "(" + b + ", " + a + ")", Blockly.Codigo.ORDER_FUNCTION_CALL]
};
Blockly.Codigo.math_random_float = function(a) {
    return ["<span class='texto-warning'>Math.random()</span>", Blockly.Codigo.ORDER_FUNCTION_CALL]
};
// blocos de texto
Blockly.Codigo.texts = {};
Blockly.Codigo.text = function(a) {
    return ["<span class='texto-muted'>"+Blockly.Codigo.quote_(a.getFieldValue("TEXT"))+"</span>", Blockly.Codigo.ORDER_ATOMIC]
};
Blockly.Codigo.text_join = function(a) {
    switch (a.itemCount_) {
        case 0:
            return ["<span class='texto-muted'>''</span>", Blockly.Codigo.ORDER_ATOMIC];
        case 1:
            return ["<span class='texto-muted'>String(<span>" + (Blockly.Codigo.valueToCode(a, "ADD0", Blockly.Codigo.ORDER_NONE) || "<span class='texto-muted'>''</span>") + "<span class='texto-muted'>)</span>", Blockly.Codigo.ORDER_FUNCTION_CALL];
        case 2:
            var b = Blockly.Codigo.valueToCode(a, "ADD0", Blockly.Codigo.ORDER_NONE) || "<span class='texto-muted'>''</span>";
            a = Blockly.Codigo.valueToCode(a, "ADD1", Blockly.Codigo.ORDER_NONE) || "<span class='texto-muted'>''</span>";
            return ["<span class='texto-muted'>String(</span>" + b + "<span class='texto-muted'>) + String(<span>" + a + "<span class='texto-muted'>)</span>", Blockly.Codigo.ORDER_ADDITION];
        default:
            for (var b = Array(a.itemCount_), c = 0; c < a.itemCount_; c++) b[c] = Blockly.Codigo.valueToCode(a, "ADD" + c, Blockly.Codigo.ORDER_COMMA) || "<span class='texto-muted'>''</span>";
            a = "<span class='texto-muted'>[</span>" + b.join("<span class='texto-muted'>,</span>") + "<span class='texto-muted'>].join('')</span>";
            return [a, Blockly.Codigo.ORDER_FUNCTION_CALL]
    }
};
Blockly.Codigo.text_append = function(a) {
    var b = Blockly.Codigo.variableDB_.getName(a.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE);
    a = Blockly.Codigo.valueToCode(a, "TEXT", Blockly.Codigo.ORDER_NONE) || "''";
    return "<span class='texto-muted'><span class='texto-danger'>"+b + "</span>= String(" + b + ") + String(" + a + ");</span>\n"
};
Blockly.Codigo.text_length = function(a) {
    return [(Blockly.Codigo.valueToCode(a, "VALUE", Blockly.Codigo.ORDER_FUNCTION_CALL) || "''") + "<span class='texto-muted'>.length</span>", Blockly.Codigo.ORDER_MEMBER]
};
Blockly.Codigo.text_isEmpty = function(a) {
    return ["<span class='texto-muted'>!<span>" + (Blockly.Codigo.valueToCode(a, "VALUE", Blockly.Codigo.ORDER_MEMBER) || "''") + "<span class='texto-muted'>.length</span>", Blockly.Codigo.ORDER_LOGICAL_NOT]
};
Blockly.Codigo.text_indexOf = function(a) {
    var b = "FIRST" == a.getFieldValue("END") ? "indexOf" : "lastIndexOf",
        c = Blockly.Codigo.valueToCode(a, "FIND", Blockly.Codigo.ORDER_NONE) || "''";
    a = (Blockly.Codigo.valueToCode(a, "VALUE", Blockly.Codigo.ORDER_MEMBER) || "''") + "<span class='texto-muted'>." + b + "</span><span class='texto-muted'>(<span>" + c + "<span class='texto-muted'>)</span>";
    return Blockly.Codigo.ONE_BASED_INDEXING ? [a + " + 1", Blockly.Codigo.ORDER_ADDITION] : [a, Blockly.Codigo.ORDER_FUNCTION_CALL]
};
Blockly.Codigo.text_charAt = function(a) {
    var b = a.getFieldValue("WHERE") || "FROM_START",
        c = Blockly.Codigo.valueToCode(a, "VALUE", "RANDOM" == b ? Blockly.Codigo.ORDER_NONE : Blockly.Codigo.ORDER_MEMBER) || "''";
    switch (b) {
        case "FIRST":
            return [c + "<span class='texto-muted'>.charAt(0)</span>", Blockly.Codigo.ORDER_FUNCTION_CALL];
        case "LAST":
            return [c + "<span class='texto-muted'>.slice(-1)</span>", Blockly.Codigo.ORDER_FUNCTION_CALL];
        case "FROM_START":
            return a = Blockly.Codigo.getAdjusted(a, "AT"), [c + "<span class='texto-muted'>.charAt(" + a + ")</span>", Blockly.Codigo.ORDER_FUNCTION_CALL];
        case "FROM_END":
            return a =
                Blockly.Codigo.getAdjusted(a, "AT", 1, !0), [c + "<span class='texto-muted'>.slice" + a + ").charAt(0)</span>", Blockly.Codigo.ORDER_FUNCTION_CALL];
        case "RANDOM":
            return ["<span class='texto-muted'>"+Blockly.Codigo.provideFunction_("textRandomLetter", ["</span><mark><em>function " + Blockly.Codigo.FUNCTION_NAME_PLACEHOLDER_ + "(text) {", "  var x = Math.floor(Math.random() * text.length);", "  return text[x];", "}</em></mark>"]) + "(" + c + ")", Blockly.Codigo.ORDER_FUNCTION_CALL]
    }
    throw "Unhandled option (text_charAt).";
};
Blockly.Codigo.text.getIndex_ = function(a, b, c) {
    return "FIRST" == b ? "0" : "FROM_END" == b ? a + ".length - 1 - " + c : "LAST" == b ? a + ".length - 1" : c
};
Blockly.Codigo.text_getSubstring = function(a) {
    var b = Blockly.Codigo.valueToCode(a, "STRING", Blockly.Codigo.ORDER_FUNCTION_CALL) || "''",
        c = a.getFieldValue("WHERE1"),
        d = a.getFieldValue("WHERE2");
    if ("FIRST" != c || "LAST" != d)
        if (b.match(/^'?\w+'?$/) || "FROM_END" != c && "LAST" != c && "FROM_END" != d && "LAST" != d) {
            switch (c) {
                case "FROM_START":
                    var e = "<span class='texto-muted'>"+Blockly.Codigo.getAdjusted(a, "AT1")+"</span>";
                    break;
                case "FROM_END":
                    e = Blockly.Codigo.getAdjusted(a, "AT1", 1, !1, Blockly.Codigo.ORDER_SUBTRACTION);
                    e = b + "<span class='texto-muted'>.length - </span>" + e;
                    break;
                case "FIRST":
                    e = "<span class='texto-muted'>0</span>";
                    break;
                default:
                    throw "Unhandled option (text_getSubstring).";
            }
            switch (d) {
                case "FROM_START":
                    a = "<span class='texto-muted'>"+Blockly.Codigo.getAdjusted(a, "AT2", 1)+"</span>";
                    break;
                case "FROM_END":
                    a = Blockly.Codigo.getAdjusted(a, "AT2", 0, !1, Blockly.Codigo.ORDER_SUBTRACTION);
                    a = b + "<span class='texto-muted'>.length - </span>" + a;
                    break;
                case "LAST":
                    a = b + "<span class='texto-muted'>.length</span>";
                    break;
                default:
                    throw "Unhandled option (text_getSubstring).";
            }
            b = b + "<span class='texto-muted'>.slice(</span>" + e + "<span class='texto-muted'>, </span>" + a + "<span class='texto-muted'>)</span>"
        } else {
            e = Blockly.Codigo.getAdjusted(a, "AT1");
            a = Blockly.Codigo.getAdjusted(a, "AT2");
            var f = Blockly.Codigo.text.getIndex_,
                g = {
                    FIRST: "First",
                    LAST: "Last",
                    FROM_START: "FromStart",
                    FROM_END: "FromEnd"
                },
                b = "<span class='texto-muted'>"+Blockly.Codigo.provideFunction_("subsequence"+ g[c] + g[d], ["</span><mark><em>function " + Blockly.Codigo.FUNCTION_NAME_PLACEHOLDER_ + "(sequence" + ("FROM_END" == c || "FROM_START" == c ? ", at1" : "") + ("FROM_END" == d || "FROM_START" == d ? ", at2" : "") + ") {", "  var start = " + f("sequence", c, "at1") + ";", "  var end = " + f("sequence", d, "at2") + " + 1;", "  return sequence.slice(start, end);", "}</em></mark>"]) + "(" + b + ("FROM_END" == c || "FROM_START" == c ? ", " + e : "") + ("FROM_END" == d || "FROM_START" == d ? ", " + a : "") + ")"
        }
    return [b, Blockly.Codigo.ORDER_FUNCTION_CALL]
};
Blockly.Codigo.text_changeCase = function(a) {
    var b = {
        UPPERCASE: "<span class='texto-muted'>.toUpperCase()</span>",
        LOWERCASE: "<span class='texto-muted'>.toLowerCase()</span>",
        TITLECASE: null
    }[a.getFieldValue("CASE")];
    a = Blockly.Codigo.valueToCode(a, "TEXT", b ? Blockly.Codigo.ORDER_MEMBER : Blockly.Codigo.ORDER_NONE) || "''";
    return [b ? a + b : "<span class='texto-muted'>"+Blockly.Codigo.provideFunction_("textToTitleCase", ["</span><mark><em>function " + Blockly.Codigo.FUNCTION_NAME_PLACEHOLDER_ + "(str) {", "  return str.replace(/\\S+/g,", "      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});", "}</em></mark>"]) +
        "(" + a + ")", Blockly.Codigo.ORDER_FUNCTION_CALL
    ]
};
Blockly.Codigo.text_trim = function(a) {
    var b = {
        LEFT: "<span class='texto-muted'>.replace(/^[\\s\\xa0]+/, '')</span>",
        RIGHT: "<span class='texto-muted'>.replace(/[\\s\\xa0]+$/, '')</span>",
        BOTH: "<span class='texto-muted'>.trim()</span>"
    }[a.getFieldValue("MODE")];
    return [(Blockly.Codigo.valueToCode(a, "TEXT", Blockly.Codigo.ORDER_MEMBER) || "''") + b, Blockly.Codigo.ORDER_FUNCTION_CALL]
};
Blockly.Codigo.text_print = function(a) {
    return "<span class='texto-muted'>window.alert(</span>" + (Blockly.Codigo.valueToCode(a, "TEXT", Blockly.Codigo.ORDER_NONE) || "''") + "<span class='texto-muted'>)</span>;\n"
};
Blockly.Codigo.text_prompt_ext = function(a) {
    var b = "<span class='texto-muted'>window.prompt(</span>" + (a.getField("TEXT") ? Blockly.Codigo.quote_(a.getFieldValue("TEXT")) : Blockly.Codigo.valueToCode(a, "TEXT", Blockly.Codigo.ORDER_NONE) || "''") + "<span class='texto-muted'>)</span>";
    "NUMBER" == a.getFieldValue("TYPE") && (b = "<span class='texto-muted'>parseFloat(</span>" + b + "<span class='texto-muted'>)</span>");
    return [b, Blockly.Codigo.ORDER_FUNCTION_CALL]
};
Blockly.Codigo.text_prompt = Blockly.Codigo.text_prompt_ext;
Blockly.Codigo.variables = {};
Blockly.Codigo.variables_get = function(a) {
    return ["<span class='texto-danger'>"+Blockly.Codigo.variableDB_.getName(a.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE)+"</span>", Blockly.Codigo.ORDER_ATOMIC]
};
Blockly.Codigo.variables_set = function(a) {
    var b = Blockly.Codigo.valueToCode(a, "VALUE", Blockly.Codigo.ORDER_ASSIGNMENT) || "0";
    return "<span class='texto-danger'>"+Blockly.Codigo.variableDB_.getName(a.getFieldValue("VAR"), Blockly.Variables.NAME_TYPE)+ "=" + b + "</span>;\n"
};